// This file contains material supporting section 3.7 of the textbook:// "Object Oriented Software Engineering" and is issued under the open-source// license found at www.lloseng.com package client;import com.lloseng.ocsf.client.*;import common.*;import java.io.*;import java.util.Observable;import java.util.Observer;/** * This class overrides some of the methods defined in the abstract superclass * in order to give more functionality to the client. * * @author Dr Timothy C. Lethbridge * @author Dr Robert Lagani&egrave; * @author Fran&ccedil;ois B&eacute;langer * @version July 2000 */public class ChatClient implements Observer {	// Instance variables **********************************************	/**	 * The interface type variable. It allows the implementation of the display	 * method in the client.	 */	ChatIF clientUI;	String id;	ObservableClient observableClient;	// Constructors ****************************************************	/**	 * Constructs an instance of the chat client.	 *	 * @param host     The server to connect to.	 * @param port     The port number to connect on.	 * @param clientUI The interface type variable.	 */	public ChatClient(String host, int port, ChatIF clientUI) throws IOException {		observableClient = new ObservableClient(host, port); 		observableClient.addObserver(this);		this.clientUI = clientUI;		observableClient.openConnection();	}		/**	 * Constructs an instance of the chat client.	 *	 * @param host     The server to connect to.	 * @param port     The port number to connect on.	 * @param clientUI The interface type variable.	 * @param name     The id of client.	 */	public ChatClient(String host, int port, ChatIF clientUI, String name) throws IOException {		observableClient = new ObservableClient(host, port); 		observableClient.addObserver(this);		this.clientUI = clientUI;		this.id = name;		observableClient.openConnection();		clientUI.display("#login " + this.id);		observableClient.sendToServer("#login " + this.id);			}	// Instance methods ************************************************	public Boolean isCommand(String mess) {		return mess.substring(0, 1).equals("#");	}	/**	 * This method handles all data that comes in from the server.	 *	 * @param msg The message from the server.	 */	public void handleMessageFromServer(Object msg) {		if (this.isCommand((String) msg)) {			String[] args = ((String) msg).split(" ");			String command = args[0];			switch (command) {			case "#logoff":				if (this.observableClient.isConnected()) {					try {						observableClient.sendToServer(msg);						observableClient.closeConnection();					} catch (IOException e) {						e.printStackTrace();					}				}				break;			default:				clientUI.display("Your command " + command + " is wrong");			}		} else {			clientUI.display(msg.toString());		}	}	/**	 * This method handles all data coming from the UI	 *	 * @param message The message from the UI.	 */	public void handleMessageFromClientUI(String message) {		if (this.isCommand(message)) {			String[] args = message.split(" ");			String command = args[0];			switch (command) {			case "#quit":				if (this.observableClient.isConnected()) {					try {						observableClient.sendToServer(message);					} catch (IOException e) {						e.printStackTrace();					}					quit();				}				break;			case "#logoff":				if (this.observableClient.isConnected()) {					try {						observableClient.sendToServer(message);						observableClient.closeConnection();					} catch (IOException e) {						e.printStackTrace();					}				}				break;						case "#login":				if (this.observableClient.isConnected()) {					clientUI.display("Client is already connected.");				} else {					try {						this.observableClient.openConnection();						this.id = args[1];						this.observableClient.sendToServer("#login " + this.id);						clientUI.display("You are connected !");					} catch (IOException e) {						e.printStackTrace();					}				}				break;			case "#sethost":				if(this.observableClient.isConnected()) {					clientUI.display("You must be disconnected to set host.");				}				else {					this.observableClient.setHost(args[1]);					clientUI.display("Host has been set to " + this.observableClient.getHost());				}				break;			case "#setport":				if(this.observableClient.isConnected()) {					clientUI.display("You must be disconnected to set port.");				}				else {					this.observableClient.setPort(Integer.parseInt(args[1]));					clientUI.display("Port has been set to " + this.observableClient.getPort());				}				break;			case "#gethost":				if(this.observableClient.isConnected()) {					clientUI.display("Your host is " + this.observableClient.getHost());				}				break;			case "#getport":				if(this.observableClient.isConnected()) {					clientUI.display("Your port is " + this.observableClient.getPort());				}				break;			default:				clientUI.display("Your command " + command + " is wrong");			}		} else {			try {				observableClient.sendToServer(message);			} catch (IOException e) {				clientUI.display("Could not send message to server.  Terminating client.");				quit();			}		}	}	public void connectionClosed() {		clientUI.display("The connexion with the server stopped.");	}		public void connectionEstablished() {		clientUI.display("The connexion with the server established.");	}	public void connectionException(Exception e) {		clientUI.display("The connexion with the server was lost");	}		@Override	public void update(Observable o, Object arg) {		if ( arg instanceof Exception ) {			connectionException((Exception) arg);		}		else if (arg.equals(ObservableClient.CONNECTION_ESTABLISHED)) {			this.connectionEstablished();			}		else if (arg.equals(ObservableClient.CONNECTION_CLOSED)) {			this.connectionClosed();		}		else {			this.handleMessageFromServer(arg);		}			}	/**	 * This method terminates the client.	 */	public void quit() {		try {			observableClient.closeConnection();		} catch (IOException e) {		}		System.exit(0);	}}//End of ChatClient class